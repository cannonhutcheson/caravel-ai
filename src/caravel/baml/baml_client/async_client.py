###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]

class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client


    
    async def ConstructAPIRequest(
        self,
        path: str,params: str,request_body: str,
        baml_options: BamlCallOptions = {},
    ) -> types.APIRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "ConstructAPIRequest",
        {
          "path": path,"params": params,"request_body": request_body,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.APIRequest, raw.cast_to(types, types, partial_types, False))
    
    async def CreateAPIRequestBody(
        self,
        schema: types.RequestBody,user_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> types.APIRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "CreateAPIRequestBody",
        {
          "schema": schema,"user_prompt": user_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.APIRequest, raw.cast_to(types, types, partial_types, False))
    
    async def CreateDescription(
        self,
        current_api_description: str,descriptions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "CreateDescription",
        {
          "current_api_description": current_api_description,"descriptions": descriptions,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractQueryParamsFormat(
        self,
        params: List[str],required: List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.RequestDataStorage:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "ExtractQueryParamsFormat",
        {
          "params": params,"required": required,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.RequestDataStorage, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractReqBodyFormat(
        self,
        req_body_json: str,required_req: List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.RequestDataStorage:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "ExtractReqBodyFormat",
        {
          "req_body_json": req_body_json,"required_req": required_req,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.RequestDataStorage, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractRequestBodySchema(
        self,
        req_body_json: str,
        baml_options: BamlCallOptions = {},
    ) -> types.RequestBody:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "ExtractRequestBodySchema",
        {
          "req_body_json": req_body_json,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.RequestBody, raw.cast_to(types, types, partial_types, False))
    
    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Resume:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.Resume, raw.cast_to(types, types, partial_types, False))
    
    async def GetIntent(
        self,
        intents: List[str],intent: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "GetIntent",
        {
          "intents": intents,"intent": intent,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))
    
    async def MakePath(
        self,
        path: str,user_input: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "MakePath",
        {
          "path": path,"user_input": user_input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))
    
    async def MapContextToParams(
        self,
        context: str,
        baml_options: BamlCallOptions = {},
    ) -> Dict[str, str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "MapContextToParams",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(Dict[str, str], raw.cast_to(types, types, partial_types, False))
    
    async def PopulateQueryParameters(
        self,
        fmt: Dict[str, str],context: str,
        baml_options: BamlCallOptions = {},
    ) -> Dict[str, str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "PopulateQueryParameters",
        {
          "fmt": fmt,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(Dict[str, str], raw.cast_to(types, types, partial_types, False))
    
    async def PopulateRequestBody(
        self,
        req_body_format: types.RequestDataStorage,context: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = await self.__runtime.call_function(
        "PopulateRequestBody",
        {
          "req_body_format": req_body_format,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def ConstructAPIRequest(
        self,
        path: str,params: str,request_body: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.APIRequest, types.APIRequest]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "ConstructAPIRequest",
        {
          "path": path,
          "params": params,
          "request_body": request_body,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.APIRequest, types.APIRequest](
        raw,
        lambda x: cast(partial_types.APIRequest, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.APIRequest, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CreateAPIRequestBody(
        self,
        schema: types.RequestBody,user_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.APIRequest, types.APIRequest]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "CreateAPIRequestBody",
        {
          "schema": schema,
          "user_prompt": user_prompt,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.APIRequest, types.APIRequest](
        raw,
        lambda x: cast(partial_types.APIRequest, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.APIRequest, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CreateDescription(
        self,
        current_api_description: str,descriptions: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "CreateDescription",
        {
          "current_api_description": current_api_description,
          "descriptions": descriptions,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractQueryParamsFormat(
        self,
        params: List[str],required: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.RequestDataStorage, types.RequestDataStorage]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "ExtractQueryParamsFormat",
        {
          "params": params,
          "required": required,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.RequestDataStorage, types.RequestDataStorage](
        raw,
        lambda x: cast(partial_types.RequestDataStorage, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.RequestDataStorage, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractReqBodyFormat(
        self,
        req_body_json: str,required_req: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.RequestDataStorage, types.RequestDataStorage]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "ExtractReqBodyFormat",
        {
          "req_body_json": req_body_json,
          "required_req": required_req,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.RequestDataStorage, types.RequestDataStorage](
        raw,
        lambda x: cast(partial_types.RequestDataStorage, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.RequestDataStorage, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractRequestBodySchema(
        self,
        req_body_json: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.RequestBody, types.RequestBody]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "ExtractRequestBodySchema",
        {
          "req_body_json": req_body_json,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.RequestBody, types.RequestBody](
        raw,
        lambda x: cast(partial_types.RequestBody, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.RequestBody, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Resume, types.Resume]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[partial_types.Resume, types.Resume](
        raw,
        lambda x: cast(partial_types.Resume, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Resume, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GetIntent(
        self,
        intents: List[str],intent: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "GetIntent",
        {
          "intents": intents,
          "intent": intent,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def MakePath(
        self,
        path: str,user_input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "MakePath",
        {
          "path": path,
          "user_input": user_input,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def MapContextToParams(
        self,
        context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Dict[str, Optional[str]], Dict[str, str]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "MapContextToParams",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Dict[str, Optional[str]], Dict[str, str]](
        raw,
        lambda x: cast(Dict[str, Optional[str]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(Dict[str, str], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def PopulateQueryParameters(
        self,
        fmt: Dict[str, str],context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Dict[str, Optional[str]], Dict[str, str]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "PopulateQueryParameters",
        {
          "fmt": fmt,
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Dict[str, Optional[str]], Dict[str, str]](
        raw,
        lambda x: cast(Dict[str, Optional[str]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(Dict[str, str], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def PopulateRequestBody(
        self,
        req_body_format: types.RequestDataStorage,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function(
        "PopulateRequestBody",
        {
          "req_body_format": req_body_format,
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    

b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]